version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: foodapp-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-foodapp}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-foodapp}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - foodapp-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: foodapp-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - foodapp-network

  # MCP Server
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: foodapp-mcp-server
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-foodapp}
      REDIS_URL: redis://redis:6379
      PORT: ${MCP_PORT:-8000}
    ports:
      - "${MCP_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./mcp-server:/app
      - /app/node_modules
    networks:
      - foodapp-network
    restart: unless-stopped

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: foodapp-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${BACKEND_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-foodapp}
      REDIS_URL: redis://redis:6379
      MCP_SERVER_URL: http://mcp-server:8000
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      RAKUTEN_API_KEY: ${RAKUTEN_API_KEY}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcp-server:
        condition: service_started
    volumes:
      - ./backend:/app
      - /app/node_modules
      - uploads:/app/uploads
    networks:
      - foodapp-network
    restart: unless-stopped

  # Frontend React App (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: foodapp-frontend
    environment:
      REACT_APP_API_URL: http://localhost:${BACKEND_PORT:-3001}/api
      REACT_APP_MCP_SERVER_URL: http://localhost:${MCP_PORT:-8000}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - foodapp-network
    stdin_open: true
    tty: true

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: foodapp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - frontend_build:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - foodapp-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  uploads:
  frontend_build:

networks:
  foodapp-network:
    driver: bridge